{"version":3,"sources":["components/layout/SignedInLinks.js","store/actions/authActions.js","components/layout/SignedOutLinks.js","components/layout/Navbar.js","components/dashboard/Notifications.js","components/projects/ProjectSummary.js","components/projects/ProjectList.js","components/dashboard/Dashboard.js","components/projects/ProjectDetails.js","components/auth/SignIn.js","components/auth/SignUp.js","components/projects/CreateProject.js","store/actions/projectActions.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/projectReducer.js","store/reducers/rootReducer.js","config/fbConfig.js","index.js"],"names":["connect","state","firebase","dispatch","signOut","getState","_ref2","getFirebase","auth","then","type","catch","err","props","react_default","a","createElement","className","react_router_dom","to","href","onClick","profile","initials","SignedOutLinks","uid","layout_SignedInLinks","layout_SignedOutLinks","Notifications","notifications","map","notif","key","id","user","content","moment","time","toDate","fromNow","ProjectSummary","project","console","log","title","authorFirstName","authorLastName","createdAt","calendar","ProjectList","projects","projects_ProjectSummary","Dashboard","_this$props","this","projects_ProjectList","dashboard_Notifications","react_router","Component","compose","firestore","ordered","firestoreConnect","collection","orderBy","limit","ownProps","match","params","data","firstName","lastName","SignIn","email","password","handleChange","e","_this","setState","Object","defineProperty","target","value","handleSubmit","preventDefault","credentials","signIn","authErr","authError","onSubmit","htmlFor","onChange","creds","_ref","signInWithEmailAndPassword","SignUp","newUser","signUp","_ref3","getFirestore","createUserWithEmailAndPassword","response","newUserUID","doc","set","CreateProject","proj","createProject","history","push","add","objectSpread","authorId","Date","App","layout_Navbar","exact","path","component","ProjectDetails","Boolean","window","location","hostname","initState","authReducer","arguments","length","undefined","action","message","projectReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","fbConfig","reactReduxFirebase","useFirestoreForProfile","userProfile","attachAuthIsReady","firebaseAuthIsReady","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fb829773.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { signOut } from \"../../store/actions/authActions\";\n\n//When a user is signed in, they will see these links in the nav bar\nconst SignedInLinks = props => {\n  return (\n    <ul className=\"right\">\n      <li>\n        <NavLink to=\"/create\">New Project</NavLink>\n      </li>\n      <li>\n        <a href=\"#\" onClick={props.signOut}>\n          Log Out\n        </a>\n      </li>\n      <li>\n        <NavLink to=\"/\" className=\"btn btn-floating pink lighten-1\">\n          {props.profile.initials}\n        </NavLink>\n      </li>\n    </ul>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    firebase: state.firebase\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    signOut: () => dispatch(signOut())\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SignedInLinks);\n","//This is our action creator\nexport const signIn = credentials => {\n  return (dispatch, getState, { getFirebase }) => {\n    /****** USING THUNK, HALT AND MAKE ASYNC CALL TO AUTH SERVICE ******/\n    const firebase = getFirebase();\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(credentials.email, credentials.password)\n      .then(() => {\n        dispatch({ type: \"LOGIN_SUCCESS\" });\n      })\n      .catch(err => {\n        dispatch({ type: \"LOGIN_ERROR\", err: err });\n      });\n  };\n};\n\nexport const signOut = () => {\n  return (dispatch, getState, { getFirebase }) => {\n    const firebase = getFirebase();\n    firebase\n      .auth()\n      .signOut()\n      .then(dispatch({ type: \"LOGOUT_SUCCESS\" }))\n      .catch(err => {\n        dispatch({ type: \"LOGOUT_ERROR\" });\n      });\n  };\n};\n\nexport const signUp = newUser => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase();\n    const firestore = getFirestore();\n\n    //We can only add the email and password of a new user to Firebase auth\n    firebase\n      .auth()\n      //Creat the new user in firebase Auth\n      .createUserWithEmailAndPassword(newUser.email, newUser.password)\n      //Creating a new user in firebase Auth returns a promise so we can tack on a then.\n      //Here we grab the newly generated UID for the new user and set it as the document id for\n      //the new Firestore entry.\n      .then(response => {\n        let newUserUID = response.user.uid;\n        return firestore\n          .collection(\"users\")\n          .doc(newUserUID)\n          .set({\n            firstName: newUser.firstName,\n            lastName: newUser.lastName,\n            initials: newUser.firstName[0] + newUser.lastName[0]\n          });\n      })\n      //Adding a Firestore entry returns a promise so we can tack on another then.\n      //Here we dispatch our action\n      .then(() => {\n        dispatch({ type: \"SIGNUP_SUCCESS\" });\n      })\n      .catch(err => {\n        dispatch({ type: \"SIGNUP_ERROR\", err });\n      });\n\n    //We need to add the user's info in Firestore\n  };\n};\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\n//When a user is NOT signed in, they will see these links in the nav bar\nconst SignedOutLinks = () => {\n  return (\n    <ul className=\"right\">\n      <li>\n        <NavLink to=\"/signup\">Sign Up</NavLink>\n      </li>\n      <li>\n        <NavLink to=\"/signin\">Login</NavLink>\n      </li>\n    </ul>\n  );\n};\n\nexport default SignedOutLinks;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport SignedInLinks from \"./SignedInLinks\";\nimport SignedOutLinks from \"./SignedOutLinks\";\nimport { connect } from \"react-redux\";\n\n//This Navbar component is a funcitonal component because we dont need to worry about state. Just display the Navbar!\n\nconst Navbar = props => {\n  const uid = props.auth.uid;\n  const { profile } = props;\n  return (\n    <nav className=\"nav-wrapper grey darken-3\">\n      <div className=\"container\">\n        <Link to=\"/\" className=\"brand-logo\">\n          Planner\n        </Link>\n        {/* Show links based on whether a user is logged in or not */}\n        {uid ? <SignedInLinks profile={profile} /> : <SignedOutLinks />}\n      </div>\n    </nav>\n  );\n};\n\nconst mapStateToProps = state => {\n  //console.log(\"state\", state);\n  return {\n    auth: state.firebase.auth,\n    profile: state.firebase.profile\n  };\n};\n\nexport default connect(mapStateToProps)(Navbar);\n","import React from \"react\";\nimport moment from \"moment\";\n\nconst Notifications = props => {\n  const { notifications } = props;\n  return (\n    <div className=\"section\">\n      <div className=\"card z-depth-0\">\n        <div className=\"card-content\">\n          <span className=\"card-title\">Notifications</span>\n          <ul className=\"notifications\">\n            {notifications &&\n              notifications.map(notif => {\n                return (\n                  <li key={notif.id}>\n                    <span className=\"pink-text\">{notif.user}&nbsp;</span>\n                    <span>{notif.content}</span>\n                    <div className=\"grey-text notif-date\">\n                      {moment(notif.time.toDate()).fromNow()}\n                    </div>\n                  </li>\n                );\n              })}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Notifications;\n","import React from \"react\";\nimport moment from \"moment\";\n// using momentJS package to format date\n\nconst ProjectSummary = props => {\n  const { project } = props;\n  console.log(\"project\", project);\n  return (\n    <div className=\"card z-depth-0 project-summary\">\n      <div className=\"card-content grey-text text-darken-3\">\n        <span className=\"car-title\">{project.title}</span>\n        <p>\n          Posted by {project.authorFirstName} {project.authorLastName}\n        </p>\n        <p className=\"grey-text\">\n          {moment(project.createdAt.toDate()).calendar()}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectSummary;\n","import React from \"react\";\nimport ProjectSummary from \"../projects/ProjectSummary\";\nimport { Link } from \"react-router-dom\";\n\n/* You could directly destructure the props into projects\nin the argument like this: const ProjectList = props => */\nconst ProjectList = props => {\n  const { projects } = props;\n  return (\n    <div className=\"project-list section\">\n      {projects &&\n        projects.map(project => {\n          return (\n            <Link to={\"/project/\" + project.id} key={project.id}>\n              <ProjectSummary project={project} />\n            </Link>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default ProjectList;\n","import React, { Component } from \"react\";\nimport Notifications from \"./Notifications\";\nimport ProjectList from \"../projects/ProjectList\";\nimport { connect } from \"react-redux\";\nimport { firestoreConnect } from \"react-redux-firebase\";\nimport { compose } from \"redux\";\nimport { Redirect } from \"react-router-dom\";\n\n// URL for the dashboard component is just '/' or '/dashboard'\n\nclass Dashboard extends Component {\n  render() {\n    //console.log(this.props);\n    const { projects, auth, notifications } = this.props; //get the projects object from the props\n\n    //If there is no uid present, that means there is no user logged in\n    if (!auth.uid) {\n      // If a user is not logged in, then redirect to signin page\n      return <Redirect to=\"/signin\" />;\n    }\n    return (\n      <div className=\"dashboard container\">\n        {/* Divide the dashboard into a right and left side (there is a small gap btwn the two)*/}\n        <div className=\"row\">\n          {/* This div will contain the project list */}\n          <div className=\"col s12 m6\">\n            <ProjectList projects={projects} />\n          </div>\n          {/* This div will contain the notifications */}\n          <div className=\"col s12 m5 offset-m1\">\n            <Notifications notifications={notifications} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// We need to be able to read from the Redux store, so we need to\n// map our state from the store to our props in this component\nconst mapStateToProps = state => {\n  //Here, state refers to the state of our store\n  console.log(state);\n  return {\n    projects: state.firestore.ordered.projects,\n    auth: state.firebase.auth,\n    notifications: state.firestore.ordered.notifications\n  };\n};\n\n/*****GRABBING DATA FROM FIRESTORE ******/\n//we can add aditional options on how we recieve the data!\nexport default compose(\n  connect(mapStateToProps),\n  firestoreConnect([\n    { collection: \"projects\", orderBy: ['createdAt', 'desc'] },\n    { collection: \"notifications\", limit: 3, orderBy: [\"time\", 'desc'] } //ordering time in descending order\n  ])\n)(Dashboard);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { firestoreConnect } from \"react-redux-firebase\";\nimport { compose } from \"redux\";\nimport { Redirect } from \"react-router-dom\";\nimport moment from \"moment\";\n\nconst ProjectDetails = props => {\n  const { project, auth } = props;\n  if (!auth.uid) return <Redirect to=\"/signin\" />;\n  if (project) {\n    return (\n      <div className=\"container section project-details\">\n        <div className=\"card z-depth-0\">\n          <div className=\"card-content\">\n            <span className=\"card-title\">{project.title}</span>\n            <p>{project.content}</p>\n          </div>\n          <div className=\"card-action grey lighten-4 grey-text\">\n            <div>\n              Posted by {project.firstName} {project.lastName}\n            </div>\n            <div>{moment(project.createdAt.toDate()).calendar()}</div>\n          </div>\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"container center\">\n        <p>Loading project...</p>\n      </div>\n    );\n  }\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  //console.log(state);\n  const id = ownProps.match.params.id;\n  const projects = state.firestore.data.projects;\n  const project = projects ? projects[id] : null;\n  return {\n    project: project,\n    auth: state.firebase.auth\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps),\n  firestoreConnect([\n    {\n      collection: \"projects\"\n    }\n  ])\n)(ProjectDetails);\n","import React, { Component } from \"react\";\nimport { signIn } from \"../../store/actions/authActions\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\n\n//This is a class based component because we have to store what a user inputs into the text fields\nclass SignIn extends Component {\n  state = {\n    email: \"\",\n    password: \"\"\n  };\n\n  handleChange = e => {\n    this.setState({\n      /*using square brackets here so that we can dynamically update the \n        object property (the property is unkown upfront at runtime). This will\n        give us the id for whichever input field is being updated (the email or password)\n        */\n      [e.target.id]: e.target.value\n    });\n  };\n  handleSubmit = e => {\n    e.preventDefault(); //Prevents reload upon submit\n    let credentials = this.state;\n    console.log(\"login credentials entered: \", credentials);\n    this.props.signIn(credentials);\n  };\n\n  render() {\n    const authErr = this.props.authError;\n    const { auth } = this.props; //same as above\n\n    if (auth.uid) {\n      return <Redirect to=\"/\" />;\n    }\n    return (\n      <div className=\"container\">\n        <form onSubmit={this.handleSubmit} className=\"white\">\n          <h5 className=\"grey-text text-darken-3\">Sign In</h5>\n          <div className=\"input-field\">\n            <label htmlFor=\"email\">Email</label>\n            <input type=\"email\" id=\"email\" onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"password\">Password</label>\n            <input type=\"password\" id=\"password\" onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <button className=\"btn pink lighten-1 z-depth-0\">Login</button>\n            <div className=\"red-text center\">\n              {authErr ? <p>Invalid login, try again lol</p> : null}\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    authError: state.auth.authError,\n    auth: state.firebase.auth\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    signIn: creds => dispatch(signIn(creds))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SignIn);\n","import React, { Component } from \"react\";\nimport { signUp } from \"../../store/actions/authActions\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\n\n//This is a class based component because we have to store what a user inputs into the text fields\nclass SignUp extends Component {\n  state = {\n    email: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\"\n  };\n\n  handleChange = e => {\n    this.setState({\n      /*using square brackets here so that we can dynamically update the \n        object property (the property is unkown upfront at runtime). This will\n        give us the id for whichever input field is being updated (the email or password)\n        */\n      [e.target.id]: e.target.value\n    });\n  };\n  handleSubmit = e => {\n    e.preventDefault(); //Prevents reload upon submit\n    const newUser = this.state;\n\n    this.props.signUp(newUser);\n  };\n\n  render() {\n    const { auth, authError } = this.props;\n    if (auth.uid) {\n      return <Redirect to=\"/\" />;\n    } else {\n      return (\n        <div className=\"container\">\n          <form onSubmit={this.handleSubmit} className=\"white\">\n            <h5 className=\"grey-text text-darken-3\">Sign Up</h5>\n\n            <div className=\"input-field\">\n              <label htmlFor=\"firstName\">First Name</label>\n              <input type=\"text\" id=\"firstName\" onChange={this.handleChange} />\n            </div>\n\n            <div className=\"input-field\">\n              <label htmlFor=\"lastName\">Last Name</label>\n              <input type=\"text\" id=\"lastName\" onChange={this.handleChange} />\n            </div>\n\n            <div className=\"input-field\">\n              <label htmlFor=\"email\">Email</label>\n              <input type=\"email\" id=\"email\" onChange={this.handleChange} />\n            </div>\n\n            <div className=\"input-field\">\n              <label htmlFor=\"password\">Password</label>\n              <input\n                type=\"password\"\n                id=\"password\"\n                onChange={this.handleChange}\n              />\n            </div>\n            <div className=\"input-field\">\n              <button className=\"btn pink lighten-1 z-depth-0\">Sign Up</button>\n              <div className=\"red-text center\">\n                {authError ? <p>{authError}</p> : null}\n              </div>\n            </div>\n          </form>\n        </div>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.firebase.auth,\n    authError: state.auth.authError\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    signUp: newUser => dispatch(signUp(newUser))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SignUp);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { createProject } from \"../../store/actions/projectActions\";\nimport { Redirect } from \"react-router-dom\";\n\n//This is a class based component because we have to store what a user inputs into the text fields\nclass CreateProject extends Component {\n  state = {\n    title: \"\",\n    content: \"\"\n  };\n\n  handleChange = e => {\n    this.setState({\n      /*using square brackets here so that we can dynamically update the \n        object property (the property is unkown upfront at runtime). This will\n        give us the id for whichever input field is being updated (the email or password)\n        */\n      [e.target.id]: e.target.value\n    });\n  };\n  handleSubmit = e => {\n    e.preventDefault(); //Prevents reload upon submit\n    let proj = this.state;\n    this.props.createProject(proj);\n    this.props.history.push(\"/\"); //redirect to homepage after creating project\n  };\n\n  render() {\n    const { auth } = this.props;\n    console.log(\"props\", auth);\n\n    if (!auth.uid) {\n      return <Redirect to=\"/signin\" />;\n    } else {\n      return (\n        <div className=\"container\">\n          <form onSubmit={this.handleSubmit} className=\"white\">\n            <h5 className=\"grey-text text-darken-3\">Create New Project</h5>\n            <div className=\"input-field\">\n              <label htmlFor=\"title\">Title</label>\n              <input type=\"text\" id=\"title\" onChange={this.handleChange} />\n            </div>\n            <div className=\"input-field\">\n              <label htmlFor=\"content\">Project Content</label>\n              <textarea\n                id=\"content\"\n                onChange={this.handleChange}\n                className=\"materialize-textarea\"\n              />\n            </div>\n            <div className=\"input-field\">\n              <button className=\"btn pink lighten-1 z-depth-0\">Create</button>\n            </div>\n          </form>\n        </div>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.firebase.auth\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createProject: project => dispatch(createProject(project))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CreateProject);\n","//With Thunk, we can return a function instead of an action object (which we do normally)\nexport const createProject = project => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    /****** USING THUNK, HALT AND MAKE ASYNC CALL TO DATABASE ******/\n    const firestore = getFirestore();\n    const profile = getState().firebase.profile;\n    const uid = getState().firebase.auth.uid;\n\n    let project_collection = firestore.collection(\"projects\"); //Reference to our projects collection on our Firestore\n    //Here we are adding a new document to the projects collection in our firestore. Doc ID is auto generated by Firestore.\n    //This is asyncronous and will return a promise, so we can add a then at the end of this add funciton.\n    project_collection\n      .add({\n        ...project,\n        authorFirstName: profile.firstName,\n        authorLastName: profile.lastName,\n        authorId: uid,\n        createdAt: new Date()\n      })\n      .then(() => {\n        /********** CONTINUE DISPATCH *************/\n        dispatch({ type: \"CREATE_PROJECT\", project: project });\n      })\n      .catch(err => {\n        /********** CATCH ERROR *************/\n        //If add cant be comepleted for some reason, then catch the error here.\n        dispatch({ type: \"CREATE_PROJECT_ERROR\", err: err });\n      });\n  };\n};\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Navbar from \"./components/layout/Navbar\";\nimport Dashboard from \"./components/dashboard/Dashboard\";\nimport ProjectDetails from \"./components/projects/ProjectDetails\";\nimport SignIn from \"./components/auth/SignIn\";\nimport SignUp from \"./components/auth/SignUp\";\nimport CreateProject from \"./components/projects/CreateProject\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\" component={Dashboard} />\n            {/* <Route path=\"/dashboard\" component={Dashboard} /> */}\n            <Route path=\"/project/:id\" component={ProjectDetails} />\n            <Route path=\"/signin\" component={SignIn} />\n            <Route path=\"/signup\" component={SignUp} />\n            <Route path=\"/create\" component={CreateProject} />\n          </Switch>\n        </header>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//We need a initState to pass in the first time around\nconst initState = {\n  authError: null\n};\n\nconst authReducer = (state = initState, action) => {\n  switch (action.type) {\n    case \"LOGIN_SUCCESS\":\n      console.log(\"successfuly logged in!\");\n      return {\n        ...state,\n        authError: null\n      };\n\n    case \"LOGIN_ERROR\":\n      console.log(\"login failed. Please try again\");\n      return {\n        ...state,\n        authError: \"Login failed\"\n      };\n\n    case \"LOGOUT_SUCCESS\":\n      console.log(\"Logged out successfuly\");\n      // return {\n      //   ...state,\n      //   authError: null\n      // };\n      return state;\n\n    case \"LOGOUT_ERROR\":\n      console.log(\"Logout error \");\n      return {\n        ...state,\n        authError: \"Logout failed\"\n      };\n\n    case \"SIGNUP_SUCCESS\":\n      console.log(\"Signed up successfully\");\n      return {\n        ...state,\n        authError: null\n      };\n\n    case \"SIGNUP_ERROR\":\n      console.log(\"There was an error in the sign up process\");\n      return {\n        ...state,\n        authError: action.err.message //we passed in err in the authActions for this case\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default authReducer;\n","//We need a initState to pass in the first time around\nconst initState = {\n  projects: [\n    { id: \"1\", title: \"help me find peach\", content: \"blah blach blah\" },\n    { id: \"2\", title: \"collect all the stars\", content: \"blah blach blah\" },\n    { id: \"3\", title: \"egg hunt with yoshi\", content: \"blah blach blah\" }\n  ]\n};\n\nconst projectReducer = (state = initState, action) => {\n  switch (action.type) {\n    case \"CREATE_PROJECT\":\n      //console.log(\"created project\", action.project);\n      return state;\n    case \"CREATE_PROJECT_ERROR\":\n      //console.log(\"create project error\", action.err);\n      return state;\n    default:\n      //console.log(\"default case\");\n      return state;\n  }\n};\n\nexport default projectReducer;\n","import authReducer from \"./authReducer\";\nimport projectReducer from \"./projectReducer\";\nimport { combineReducers } from \"redux\";\nimport { firestoreReducer } from \"redux-firestore\";\nimport { firebaseReducer } from \"react-redux-firebase\";\n\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  project: projectReducer,\n\n  /*In the background, this reducer is automatically\n   going to sync the 'firestore' property on the state object\n   to our data in the database*/\n  firestore: firestoreReducer,\n\n  /*Import the firebase reducer so that we can add the status\n  of a user to our app's state*/\n  firebase: firebaseReducer\n});\n\nexport default rootReducer;\n","import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDc3S3xawDcmPHIldlPDsBsNS1q1W2-CjM\",\n  authDomain: \"planner-63b27.firebaseapp.com\",\n  databaseURL: \"https://planner-63b27.firebaseio.com\",\n  projectId: \"planner-63b27\",\n  storageBucket: \"planner-63b27.appspot.com\",\n  messagingSenderId: \"396356610204\",\n  appId: \"1:396356610204:web:a081c79cf4df33f0\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n//firebase.firestore().settings({ timestampsInSnapshots: true });\n\nexport default firebase;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./store/reducers/rootReducer\";\nimport thunk from \"redux-thunk\";\nimport { reduxFirestore, getFirestore } from \"redux-firestore\";\nimport { reactReduxFirebase, getFirebase } from \"react-redux-firebase\";\nimport fbConfig from \"./config/fbConfig\";\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n    reduxFirestore(fbConfig),\n    reactReduxFirebase(fbConfig, {\n      useFirestoreForProfile: true,\n      userProfile: \"users\",\n      attachAuthIsReady: true\n    })\n  )\n);\n\nstore.firebaseAuthIsReady.then(() => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}